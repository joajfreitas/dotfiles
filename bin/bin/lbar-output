#!/bin/bash

# background lemon bar color definitions
bg_black1="%{B#000000}"
bg_black2="%{B#1a1a1a}"

# foreground lemon bar color definitions
fg_white1="%{F#f7f7f7}"
fg_white2="%{F#e5e5e5}"
fg_white3="%{F#6b6b6b}"

# background color definitions
bg_green="%{B#477807}"
bg_yellow="%{B#787107}"

# foreground color definitions
fg_green="%{F#89e70d}"
fg_yellow="%{F#e7d90d}"
fg_red="%{F#e83099}"

fg_blue1="%{F#0d89e7}"
fg_blue2="%{F#305069}"

fg_cyan="%{F#67E4FC}"

# lemon bar separator
sep=" | "

Date() {

    echo '' $(date +"%a %d %b %Y")
}

# define the clock
Clock() {

    echo '' $(date +"%T")
}

# grab battery information
Battery() {

    # grab current battery status from acpi using cut and sed
    # sed removes whitespace and %
    # cut picks a delimiter, then a field
    bat="$(acpi -b | cut -d, -f2 | sed 's/ //g;s/%//g')"
    batstate="$(acpi -b | awk '{print $3}')"

    if [ $batstate == 'Charging' ]; then
        status=""
    else
        status=""

    fi

    # color battery output based on percentage
    # battery is <= 50
    if [ $bat -le 25 ]; then
        bat_output=" ${fg_red} ${bat}${status}%{F-} "

    # battery is <=50
    elif [ $bat -le 50 ]; then
        bat_output=" ${fg_yellow} ${bat}${status}%{F-} "

    # battery is <=75
    elif [ $bat -le 75 ]; then
        bat_output="  ${bat}${status}%{F-} "

    # battery is <=100
    elif [ "$bat" -le 100 ]; then
        bat_output="  ${bat}${status}%{F-} "

    # error message
    else
        bat_output=" null "

    fi

    echo "$bat_output"
}

# grab volume information
Volume() {

    # grab volume and strip of [%]
    vol=$(amixer sget Master | grep 'Front Left:' | awk '{print $5}' | \
    sed 's/\[//g;s/\]//g;s/\%//g')

    # grab mute status and strip of []
    state=$(amixer sget Master | grep 'Front Left:' | awk '{print $6}' | \
    sed 's/[^a-z]//g')

    # check for mute
    if [[ $state == "on" ]]; then
        output="  ${vol} "

    else
        output="  mute "

    fi

    echo "$output"

}

# grab wifi info
Wifi() {

    # grab wifi status and run through sed
    wifi="$(iwconfig wlp2s0 | sed -n 's/"//g; s/\s*$//g; s/.*ESSID://p')"

    # check if wifi isn't connected
    if [ "$wifi" == "off/any" ]; then
        wifi_output=""
    else
        wifi_output=" ${wifi} ${sep}"
    fi

    echo "$wifi_output"
}

# set current workspace
Workspace() {

    # xprop commands
    cur=$(xprop -root _NET_CURRENT_DESKTOP | awk '{print $3}')
    tot=$(xprop -root _NET_NUMBER_OF_DESKTOPS | awk '{print $3}')
    last=$(xprop -root | grep '_NET_DESKTOP_NAMES(UTF8_STRING)' |\
awk '{print $(NF)}' | sed 's/[^0-9]//g')

    # set current workspace number
    cur=$((cur+1))

    # incrementor
    inc=1

    for w in $(seq 1 $tot); do

        # last workspace fix
        if [[ $inc == $tot ]]; then
            wkspc=$last
        else
            wkspc=$inc
        fi

        # check for current workspace
        if [[ $inc == $cur ]]; then

            #line="${line} ${wkspc} "
            line="${line}  "

        else

            #line="${line}${fg_blue2} ${wkspc} %{F-}"
            #line="${line}  %{F-}"
            line="${line}  "

        fi

        inc=$((inc+1))

    done

    #echo "$cur | $tot | $line"
    echo "$line"

}

# set and show uptime
Uptime () {

    # calculate minutes
    mins=$(awk -F'.' '{print int($1/60%60)}' /proc/uptime)

    # calculate hours
    hours=$(awk -F'.' '{print int($1/3600%24)}' /proc/uptime)

    # calculate days
    days=$(awk -F'.' '{print int($1/86400)}' /proc/uptime)

    # add leading 0 to secs if less than 9
    #if [[ $secs -le 9 ]]; then secs="0${secs}"; fi

    uptime_output=" ${days}d ${hours}h ${mins}m"

    echo "$uptime_output"

}

# print line for lbar; runs indefinitely
while true; do

    # output to lemonbar
    echo "%{l}${fg_white1}$(Workspace) $(Date) %{r}${fg_white1} $(Wifi)\
	$(Volume) $(Battery)${fg_white1}${sep} $(Uptime)${sep} $(Clock) %{F-}%{B-}"

    # wait 1 second before running loop again
    sleep 1;

done
